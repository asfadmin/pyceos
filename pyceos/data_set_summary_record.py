# This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild

from pkg_resources import parse_version
import kaitaistruct
from kaitaistruct import KaitaiStruct, KaitaiStream, BytesIO


if parse_version(kaitaistruct.__version__) < parse_version("0.9"):
    raise Exception(
        "Incompatible Kaitai Struct Python API: 0.9 or later is required, but you have %s"
        % (kaitaistruct.__version__)
    )

from . import data_set_summary_record_sensor_specific_alos
from . import ascii_int
from . import ascii_float


class DataSetSummaryRecord(KaitaiStruct):
    def __init__(self, _io, _parent=None, _root=None):
        self._io = _io
        self._parent = _parent
        self._root = _root if _root else self
        self._read()

    def _read(self):
        self._raw_sequence_number = self._io.read_bytes(4)
        _io__raw_sequence_number = KaitaiStream(BytesIO(self._raw_sequence_number))
        self.sequence_number = ascii_int.AsciiInt(_io__raw_sequence_number)
        self._raw_sar_chan = self._io.read_bytes(4)
        _io__raw_sar_chan = KaitaiStream(BytesIO(self._raw_sar_chan))
        self.sar_chan = ascii_int.AsciiInt(_io__raw_sar_chan)
        self.product_id = (self._io.read_bytes(32)).decode("ascii")
        self.scene_des = (self._io.read_bytes(16)).decode("ascii")
        self.inp_sctim = (self._io.read_bytes(32)).decode("ascii")
        self.asc_des = (self._io.read_bytes(16)).decode("ascii")
        self._raw_pro_lat = self._io.read_bytes(16)
        _io__raw_pro_lat = KaitaiStream(BytesIO(self._raw_pro_lat))
        self.pro_lat = ascii_float.AsciiFloat(_io__raw_pro_lat)
        self._raw_pro_long = self._io.read_bytes(16)
        _io__raw_pro_long = KaitaiStream(BytesIO(self._raw_pro_long))
        self.pro_long = ascii_float.AsciiFloat(_io__raw_pro_long)
        self._raw_pro_head = self._io.read_bytes(16)
        _io__raw_pro_head = KaitaiStream(BytesIO(self._raw_pro_head))
        self.pro_head = ascii_float.AsciiFloat(_io__raw_pro_head)
        self.ellip_des = (self._io.read_bytes(16)).decode("ascii")
        self._raw_ellip_maj = self._io.read_bytes(16)
        _io__raw_ellip_maj = KaitaiStream(BytesIO(self._raw_ellip_maj))
        self.ellip_maj = ascii_float.AsciiFloat(_io__raw_ellip_maj)
        self._raw_ellip_min = self._io.read_bytes(16)
        _io__raw_ellip_min = KaitaiStream(BytesIO(self._raw_ellip_min))
        self.ellip_min = ascii_float.AsciiFloat(_io__raw_ellip_min)
        self._raw_earth_mass = self._io.read_bytes(16)
        _io__raw_earth_mass = KaitaiStream(BytesIO(self._raw_earth_mass))
        self.earth_mass = ascii_float.AsciiFloat(_io__raw_earth_mass)
        self._raw_grav_const = self._io.read_bytes(16)
        _io__raw_grav_const = KaitaiStream(BytesIO(self._raw_grav_const))
        self.grav_const = ascii_float.AsciiFloat(_io__raw_grav_const)
        self._raw_ellip_j = [None] * (3)
        self.ellip_j = [None] * (3)
        for i in range(3):
            self._raw_ellip_j[i] = self._io.read_bytes(16)
            _io__raw_ellip_j = KaitaiStream(BytesIO(self._raw_ellip_j[i]))
            self.ellip_j[i] = ascii_float.AsciiFloat(_io__raw_ellip_j)

        self.spare_1 = self._io.read_bytes(16)
        self._raw_terrain_h = self._io.read_bytes(16)
        _io__raw_terrain_h = KaitaiStream(BytesIO(self._raw_terrain_h))
        self.terrain_h = ascii_float.AsciiFloat(_io__raw_terrain_h)
        self._raw_sc_lin = self._io.read_bytes(8)
        _io__raw_sc_lin = KaitaiStream(BytesIO(self._raw_sc_lin))
        self.sc_lin = ascii_float.AsciiFloat(_io__raw_sc_lin)
        self._raw_sc_pix = self._io.read_bytes(8)
        _io__raw_sc_pix = KaitaiStream(BytesIO(self._raw_sc_pix))
        self.sc_pix = ascii_float.AsciiFloat(_io__raw_sc_pix)
        self._raw_scene_len = self._io.read_bytes(16)
        _io__raw_scene_len = KaitaiStream(BytesIO(self._raw_scene_len))
        self.scene_len = ascii_float.AsciiFloat(_io__raw_scene_len)
        self._raw_scene_wid = self._io.read_bytes(16)
        _io__raw_scene_wid = KaitaiStream(BytesIO(self._raw_scene_wid))
        self.scene_wid = ascii_float.AsciiFloat(_io__raw_scene_wid)
        self.spare_2 = self._io.read_bytes(16)
        self._raw_nchn = self._io.read_bytes(4)
        _io__raw_nchn = KaitaiStream(BytesIO(self._raw_nchn))
        self.nchn = ascii_int.AsciiInt(_io__raw_nchn)
        self.spare_3 = self._io.read_bytes(4)
        self.mission_id = (self._io.read_bytes(16)).decode("ascii")
        self.sensor_id = (self._io.read_bytes(32)).decode("ascii")
        self._raw_revolution = self._io.read_bytes(8)
        _io__raw_revolution = KaitaiStream(BytesIO(self._raw_revolution))
        self.revolution = ascii_int.AsciiInt(_io__raw_revolution)
        self._raw_plat_lat = self._io.read_bytes(8)
        _io__raw_plat_lat = KaitaiStream(BytesIO(self._raw_plat_lat))
        self.plat_lat = ascii_float.AsciiFloat(_io__raw_plat_lat)
        self._raw_plat_long = self._io.read_bytes(8)
        _io__raw_plat_long = KaitaiStream(BytesIO(self._raw_plat_long))
        self.plat_long = ascii_float.AsciiFloat(_io__raw_plat_long)
        self._raw_plat_head_scene = self._io.read_bytes(8)
        _io__raw_plat_head_scene = KaitaiStream(BytesIO(self._raw_plat_head_scene))
        self.plat_head_scene = ascii_float.AsciiFloat(_io__raw_plat_head_scene)
        self._raw_clock_ang = self._io.read_bytes(8)
        _io__raw_clock_ang = KaitaiStream(BytesIO(self._raw_clock_ang))
        self.clock_ang = ascii_float.AsciiFloat(_io__raw_clock_ang)
        self._raw_incident_ang = self._io.read_bytes(8)
        _io__raw_incident_ang = KaitaiStream(BytesIO(self._raw_incident_ang))
        self.incident_ang = ascii_float.AsciiFloat(_io__raw_incident_ang)
        self._raw_frequency = self._io.read_bytes(8)
        _io__raw_frequency = KaitaiStream(BytesIO(self._raw_frequency))
        self.frequency = ascii_float.AsciiFloat(_io__raw_frequency)
        self._raw_wave_length = self._io.read_bytes(16)
        _io__raw_wave_length = KaitaiStream(BytesIO(self._raw_wave_length))
        self.wave_length = ascii_float.AsciiFloat(_io__raw_wave_length)
        self.motion_comp = (self._io.read_bytes(2)).decode("ascii")
        self.pulse_code = (self._io.read_bytes(16)).decode("ascii")
        self._raw_ampl_coef = [None] * (5)
        self.ampl_coef = [None] * (5)
        for i in range(5):
            self._raw_ampl_coef[i] = self._io.read_bytes(16)
            _io__raw_ampl_coef = KaitaiStream(BytesIO(self._raw_ampl_coef[i]))
            self.ampl_coef[i] = ascii_float.AsciiFloat(_io__raw_ampl_coef)

        self._raw_phase_coef = [None] * (5)
        self.phase_coef = [None] * (5)
        for i in range(5):
            self._raw_phase_coef[i] = self._io.read_bytes(16)
            _io__raw_phase_coef = KaitaiStream(BytesIO(self._raw_phase_coef[i]))
            self.phase_coef[i] = ascii_float.AsciiFloat(_io__raw_phase_coef)

        self._raw_chirp_ext_ind = self._io.read_bytes(8)
        _io__raw_chirp_ext_ind = KaitaiStream(BytesIO(self._raw_chirp_ext_ind))
        self.chirp_ext_ind = ascii_int.AsciiInt(_io__raw_chirp_ext_ind)
        self.spare_4 = self._io.read_bytes(8)
        self._raw_rng_samp_rate = self._io.read_bytes(16)
        _io__raw_rng_samp_rate = KaitaiStream(BytesIO(self._raw_rng_samp_rate))
        self.rng_samp_rate = ascii_float.AsciiFloat(_io__raw_rng_samp_rate)
        self._raw_rng_gate = self._io.read_bytes(16)
        _io__raw_rng_gate = KaitaiStream(BytesIO(self._raw_rng_gate))
        self.rng_gate = ascii_float.AsciiFloat(_io__raw_rng_gate)
        self._raw_rng_length = self._io.read_bytes(16)
        _io__raw_rng_length = KaitaiStream(BytesIO(self._raw_rng_length))
        self.rng_length = ascii_float.AsciiFloat(_io__raw_rng_length)
        self.baseband_f = (self._io.read_bytes(4)).decode("ascii")
        self.rngcmp_f = (self._io.read_bytes(4)).decode("ascii")
        self._raw_gn_polar = self._io.read_bytes(16)
        _io__raw_gn_polar = KaitaiStream(BytesIO(self._raw_gn_polar))
        self.gn_polar = ascii_float.AsciiFloat(_io__raw_gn_polar)
        self._raw_gn_cross = self._io.read_bytes(16)
        _io__raw_gn_cross = KaitaiStream(BytesIO(self._raw_gn_cross))
        self.gn_cross = ascii_float.AsciiFloat(_io__raw_gn_cross)
        self._raw_chn_bits = self._io.read_bytes(8)
        _io__raw_chn_bits = KaitaiStream(BytesIO(self._raw_chn_bits))
        self.chn_bits = ascii_int.AsciiInt(_io__raw_chn_bits)
        self.quant_desc = (self._io.read_bytes(12)).decode("ascii")
        self._raw_i_bias = self._io.read_bytes(16)
        _io__raw_i_bias = KaitaiStream(BytesIO(self._raw_i_bias))
        self.i_bias = ascii_float.AsciiFloat(_io__raw_i_bias)
        self._raw_q_bias = self._io.read_bytes(16)
        _io__raw_q_bias = KaitaiStream(BytesIO(self._raw_q_bias))
        self.q_bias = ascii_float.AsciiFloat(_io__raw_q_bias)
        self._raw_iq_ratio = self._io.read_bytes(16)
        _io__raw_iq_ratio = KaitaiStream(BytesIO(self._raw_iq_ratio))
        self.iq_ratio = ascii_float.AsciiFloat(_io__raw_iq_ratio)
        self._raw_spare_dss_7 = self._io.read_bytes(16)
        _io__raw_spare_dss_7 = KaitaiStream(BytesIO(self._raw_spare_dss_7))
        self.spare_dss_7 = ascii_float.AsciiFloat(_io__raw_spare_dss_7)
        self._raw_spare_dss_8 = self._io.read_bytes(16)
        _io__raw_spare_dss_8 = KaitaiStream(BytesIO(self._raw_spare_dss_8))
        self.spare_dss_8 = ascii_float.AsciiFloat(_io__raw_spare_dss_8)
        self._raw_ele_sight = self._io.read_bytes(16)
        _io__raw_ele_sight = KaitaiStream(BytesIO(self._raw_ele_sight))
        self.ele_sight = ascii_float.AsciiFloat(_io__raw_ele_sight)
        self._raw_mech_sight = self._io.read_bytes(16)
        _io__raw_mech_sight = KaitaiStream(BytesIO(self._raw_mech_sight))
        self.mech_sight = ascii_float.AsciiFloat(_io__raw_mech_sight)
        self.echo_track = (self._io.read_bytes(4)).decode("ascii")
        self._raw_prf = self._io.read_bytes(16)
        _io__raw_prf = KaitaiStream(BytesIO(self._raw_prf))
        self.prf = ascii_float.AsciiFloat(_io__raw_prf)
        self._raw_elev_beam = self._io.read_bytes(16)
        _io__raw_elev_beam = KaitaiStream(BytesIO(self._raw_elev_beam))
        self.elev_beam = ascii_float.AsciiFloat(_io__raw_elev_beam)
        self._raw_azi_beam = self._io.read_bytes(16)
        _io__raw_azi_beam = KaitaiStream(BytesIO(self._raw_azi_beam))
        self.azi_beam = ascii_float.AsciiFloat(_io__raw_azi_beam)
        self._raw_sat_bintim = self._io.read_bytes(16)
        _io__raw_sat_bintim = KaitaiStream(BytesIO(self._raw_sat_bintim))
        self.sat_bintim = ascii_int.AsciiInt(_io__raw_sat_bintim)
        self.sat_clktim = (self._io.read_bytes(32)).decode("ascii")
        self._raw_sat_clkinc = self._io.read_bytes(16)
        _io__raw_sat_clkinc = KaitaiStream(BytesIO(self._raw_sat_clkinc))
        self.sat_clkinc = ascii_int.AsciiInt(_io__raw_sat_clkinc)
        self.fac_id = (self._io.read_bytes(16)).decode("ascii")
        self.sys_id = (self._io.read_bytes(8)).decode("ascii")
        self.ver_id = (self._io.read_bytes(8)).decode("ascii")
        self.fac_code = (self._io.read_bytes(16)).decode("ascii")
        self.lev_code = (self._io.read_bytes(16)).decode("ascii")
        self.product_type = (self._io.read_bytes(32)).decode("ascii")
        self.algor_id = (self._io.read_bytes(32)).decode("ascii")
        self._raw_n_azilok = self._io.read_bytes(16)
        _io__raw_n_azilok = KaitaiStream(BytesIO(self._raw_n_azilok))
        self.n_azilok = ascii_float.AsciiFloat(_io__raw_n_azilok)
        self._raw_n_rnglok = self._io.read_bytes(16)
        _io__raw_n_rnglok = KaitaiStream(BytesIO(self._raw_n_rnglok))
        self.n_rnglok = ascii_float.AsciiFloat(_io__raw_n_rnglok)
        self._raw_bnd_azilok = self._io.read_bytes(16)
        _io__raw_bnd_azilok = KaitaiStream(BytesIO(self._raw_bnd_azilok))
        self.bnd_azilok = ascii_float.AsciiFloat(_io__raw_bnd_azilok)
        self._raw_bnd_rnglok = self._io.read_bytes(16)
        _io__raw_bnd_rnglok = KaitaiStream(BytesIO(self._raw_bnd_rnglok))
        self.bnd_rnglok = ascii_float.AsciiFloat(_io__raw_bnd_rnglok)
        self._raw_bnd_azi = self._io.read_bytes(16)
        _io__raw_bnd_azi = KaitaiStream(BytesIO(self._raw_bnd_azi))
        self.bnd_azi = ascii_float.AsciiFloat(_io__raw_bnd_azi)
        self._raw_bnd_rng = self._io.read_bytes(16)
        _io__raw_bnd_rng = KaitaiStream(BytesIO(self._raw_bnd_rng))
        self.bnd_rng = ascii_float.AsciiFloat(_io__raw_bnd_rng)
        self.azi_weight = (self._io.read_bytes(32)).decode("ascii")
        self.rng_weight = (self._io.read_bytes(32)).decode("ascii")
        self.data_inpsrc = (self._io.read_bytes(16)).decode("ascii")
        self._raw_rng_res = self._io.read_bytes(16)
        _io__raw_rng_res = KaitaiStream(BytesIO(self._raw_rng_res))
        self.rng_res = ascii_float.AsciiFloat(_io__raw_rng_res)
        self._raw_azi_res = self._io.read_bytes(16)
        _io__raw_azi_res = KaitaiStream(BytesIO(self._raw_azi_res))
        self.azi_res = ascii_float.AsciiFloat(_io__raw_azi_res)
        self._raw_radi_stretch = [None] * (2)
        self.radi_stretch = [None] * (2)
        for i in range(2):
            self._raw_radi_stretch[i] = self._io.read_bytes(16)
            _io__raw_radi_stretch = KaitaiStream(BytesIO(self._raw_radi_stretch[i]))
            self.radi_stretch[i] = ascii_float.AsciiFloat(_io__raw_radi_stretch)

        self._raw_alt_dopcen = [None] * (3)
        self.alt_dopcen = [None] * (3)
        for i in range(3):
            self._raw_alt_dopcen[i] = self._io.read_bytes(16)
            _io__raw_alt_dopcen = KaitaiStream(BytesIO(self._raw_alt_dopcen[i]))
            self.alt_dopcen[i] = ascii_float.AsciiFloat(_io__raw_alt_dopcen)

        self.spare_5 = self._io.read_bytes(16)
        self._raw_crt_dopcen = [None] * (3)
        self.crt_dopcen = [None] * (3)
        for i in range(3):
            self._raw_crt_dopcen[i] = self._io.read_bytes(16)
            _io__raw_crt_dopcen = KaitaiStream(BytesIO(self._raw_crt_dopcen[i]))
            self.crt_dopcen[i] = ascii_float.AsciiFloat(_io__raw_crt_dopcen)

        self.time_dir_pix = (self._io.read_bytes(8)).decode("ascii")
        self.time_dir_lin = (self._io.read_bytes(8)).decode("ascii")
        self._raw_alt_rate = [None] * (3)
        self.alt_rate = [None] * (3)
        for i in range(3):
            self._raw_alt_rate[i] = self._io.read_bytes(16)
            _io__raw_alt_rate = KaitaiStream(BytesIO(self._raw_alt_rate[i]))
            self.alt_rate[i] = ascii_float.AsciiFloat(_io__raw_alt_rate)

        self.spare_6 = self._io.read_bytes(16)
        self._raw_crt_rate = [None] * (3)
        self.crt_rate = [None] * (3)
        for i in range(3):
            self._raw_crt_rate[i] = self._io.read_bytes(16)
            _io__raw_crt_rate = KaitaiStream(BytesIO(self._raw_crt_rate[i]))
            self.crt_rate[i] = ascii_float.AsciiFloat(_io__raw_crt_rate)

        self.spare_7 = self._io.read_bytes(16)
        self.line_cont = (self._io.read_bytes(8)).decode("ascii")
        self.clutterlock_flg = (self._io.read_bytes(4)).decode("ascii")
        self.auto_focus = (self._io.read_bytes(4)).decode("ascii")
        self._raw_line_spacing = self._io.read_bytes(16)
        _io__raw_line_spacing = KaitaiStream(BytesIO(self._raw_line_spacing))
        self.line_spacing = ascii_float.AsciiFloat(_io__raw_line_spacing)
        self._raw_pixel_spacing = self._io.read_bytes(16)
        _io__raw_pixel_spacing = KaitaiStream(BytesIO(self._raw_pixel_spacing))
        self.pixel_spacing = ascii_float.AsciiFloat(_io__raw_pixel_spacing)
        self.rngcmp_desg = (self._io.read_bytes(16)).decode("ascii")
        self._raw_dopcen_const = self._io.read_bytes(16)
        _io__raw_dopcen_const = KaitaiStream(BytesIO(self._raw_dopcen_const))
        self.dopcen_const = ascii_float.AsciiFloat(_io__raw_dopcen_const)
        self._raw_dopcen_lin = self._io.read_bytes(16)
        _io__raw_dopcen_lin = KaitaiStream(BytesIO(self._raw_dopcen_lin))
        self.dopcen_lin = ascii_float.AsciiFloat(_io__raw_dopcen_lin)
        _on = (self.sensor_id)[0:4]
        if _on == "ALOS":
            self._raw_sensor_specific = self._io.read_bytes_full()
            _io__raw_sensor_specific = KaitaiStream(BytesIO(self._raw_sensor_specific))
            self.sensor_specific = data_set_summary_record_sensor_specific_alos.DataSetSummaryRecordSensorSpecificAlos(
                _io__raw_sensor_specific
            )
        else:
            self.sensor_specific = self._io.read_bytes_full()
